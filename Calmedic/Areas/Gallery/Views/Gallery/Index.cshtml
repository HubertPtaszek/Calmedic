@model GalleryListVM
@{
    ViewBag.Title = UtilsResource.Gallery;

    //zrobić model, pozniej komponent na każdy element galerii, popup moze jeden
    //w modelu litsa modeli, komponent jako model ma elemnet listy
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item" aria-current="page"><a href="@Url.Action("Index", "Dashboard", new { area = AreaNames.Dashboard_Area })">@UtilsResource.Home.ToHtmlStringSafe()</a></li>
        <li class="breadcrumb-item active" aria-current="page">@UtilsResource.Gallery.ToHtmlStringSafe()</li>
    </ol>
</nav>

<div class="wrapper">
    <div class="wrapper-header d-flex middle between">
        <h4 class="wrapper-header-title">@UtilsResource.Gallery.ToHtmlStringSafe() (<span id="totalCountId">3</span>)</h4>
        <div>
            <div id="addBtnId"></div>
        </div>
    </div>
    <hr />
    <div class="wrapper-inner">
        <div class="row">
            @{
                foreach (GalleyItemVM item in Model.Files)
                {
                    await Component.InvokeAsync("FileItem", item);
                }
            }
        </div>
    </div>
</div>

@await Component.InvokeAsync("AddFile", new GalleyAddItemVM() { ClinicId = Model.ClinicId });

<script>
    $(document).ready(function () {
        $("#addBtnId").dxButton({
            elementAttr: { class: "btn btn-default" },
            height: 32,
            text: "@ButtonNameResource.Add.ToScriptStringSafe()",
            onClick: function () {
                $("#addPopupId").dxPopup("instance").show();
            },
            type: "default"
        });
    });
</script>